module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5], // when to star
    
    input s, // sum computed by full adder
    input co, // carry computed by full adder
    output a,  // the value for a feed into the full adder
    output b,  // the value for b feed into the full adder
    output ci // the value for carry feed into the full adder
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    adder adderInput;
    multi_seven_seg seg;
 
  }
  }
   
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs as test cases
    // the segments will display "0000" by default
    seg.values = {4h0, 4h0, 4h0, 4h0};
    seg.values = {adderInput.a_out, adderInput.b_out, adderInput.c_out, adderInput.d_out};
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    
    
    
    
    
    
    a = 0;
    b = 0;
    ci = 0;
    
    a = adderInput.a;
    b = adderInput.b;
    ci = adderInput.ci;
    
    adderInput.s = s;
    adderInput.co = co;
    


  }
}