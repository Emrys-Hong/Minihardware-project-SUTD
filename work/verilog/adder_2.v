/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_2 (
    input clk,
    input rst,
    output reg a,
    output reg b,
    output reg ci,
    input s,
    input co,
    output reg [3:0] a_out,
    output reg [3:0] b_out,
    output reg [3:0] c_out,
    output reg [3:0] d_out,
    output reg [7:0] testcase
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_4 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  reg [26:0] M_state_changer_d, M_state_changer_q = 1'h0;
  localparam ZERO_state = 4'd0;
  localparam ONE_state = 4'd1;
  localparam TWO_state = 4'd2;
  localparam THREE_state = 4'd3;
  localparam FOUR_state = 4'd4;
  localparam FIVE_state = 4'd5;
  localparam SIX_state = 4'd6;
  localparam SEVEN_state = 4'd7;
  localparam ERROR_state = 4'd8;
  localparam GOOD_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = ZERO_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_state_changer_d = M_state_changer_q;
    
    a = 1'h0;
    b = 1'h0;
    ci = 1'h0;
    a_out = 4'h0;
    b_out = 4'h0;
    c_out = 4'h0;
    d_out = 4'h0;
    testcase = 8'h00;
    M_edge_detector_in = M_state_changer_q[26+0-:1];
    M_state_changer_d = M_state_changer_q + 1'h1;
    
    case (M_state_q)
      ZERO_state: begin
        a = 1'h0;
        b = 1'h0;
        ci = 1'h0;
        a_out = 4'h0;
        b_out = 4'h0;
        c_out = 4'h0;
        d_out = 4'h0;
        testcase = 8'h00;
        if (M_edge_detector_out) begin
          if (co == 1'h0 && s == 1'h0) begin
            M_state_d = ONE_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      ONE_state: begin
        a = 1'h1;
        b = 1'h0;
        ci = 1'h0;
        a_out = 4'h1;
        b_out = 4'h0;
        c_out = 4'h0;
        d_out = 4'h0;
        testcase = 8'h01;
        if (M_edge_detector_out) begin
          if (co == 1'h0 && s == 1'h1) begin
            M_state_d = TWO_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      TWO_state: begin
        a = 1'h0;
        b = 1'h1;
        ci = 1'h0;
        a_out = 4'h0;
        b_out = 4'h1;
        c_out = 4'h0;
        d_out = 4'h0;
        testcase = 8'h02;
        if (M_edge_detector_out) begin
          if (co == 1'h0 && s == 1'h1) begin
            M_state_d = THREE_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      THREE_state: begin
        a = 1'h1;
        b = 1'h1;
        ci = 1'h0;
        a_out = 4'h1;
        b_out = 4'h1;
        c_out = 4'h0;
        d_out = 4'h0;
        testcase = 8'h03;
        if (M_edge_detector_out) begin
          if (co == 1'h1 && s == 1'h0) begin
            M_state_d = FOUR_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      FOUR_state: begin
        a = 1'h0;
        b = 1'h0;
        ci = 1'h1;
        a_out = 4'h0;
        b_out = 4'h0;
        c_out = 4'h1;
        d_out = 4'h0;
        testcase = 8'h04;
        if (M_edge_detector_out) begin
          if (co == 1'h0 && s == 1'h1) begin
            M_state_d = FIVE_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      FIVE_state: begin
        a = 1'h1;
        b = 1'h0;
        ci = 1'h1;
        a_out = 4'h1;
        b_out = 4'h0;
        c_out = 4'h1;
        d_out = 4'h0;
        testcase = 8'h05;
        if (M_edge_detector_out) begin
          if (co == 1'h1 && s == 1'h0) begin
            M_state_d = SIX_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      SIX_state: begin
        a = 1'h0;
        b = 1'h1;
        ci = 1'h1;
        a_out = 4'h0;
        b_out = 4'h1;
        c_out = 4'h1;
        d_out = 4'h0;
        testcase = 8'h06;
        if (M_edge_detector_out) begin
          if (co == 1'h1 && s == 1'h0) begin
            M_state_d = SEVEN_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      SEVEN_state: begin
        a = 1'h1;
        b = 1'h1;
        ci = 1'h1;
        a_out = 4'h1;
        b_out = 4'h1;
        c_out = 4'h1;
        d_out = 4'h0;
        testcase = 8'h07;
        if (M_edge_detector_out) begin
          if (co == 1'h1 && s == 1'h1) begin
            M_state_d = GOOD_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
      end
      ERROR_state: begin
        a_out = 4'hd;
        b_out = 4'hd;
        c_out = 4'he;
        d_out = 4'h0;
      end
      GOOD_state: begin
        a_out = 4'ha;
        b_out = 4'hb;
        c_out = 4'hb;
        d_out = 4'hc;
        if (M_edge_detector_out) begin
          M_state_d = ZERO_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_changer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_state_changer_q <= M_state_changer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
