/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input s,
    input co,
    output reg a,
    output reg b,
    output reg ci
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_adderInput_a;
  wire [1-1:0] M_adderInput_b;
  wire [1-1:0] M_adderInput_ci;
  wire [4-1:0] M_adderInput_a_out;
  wire [4-1:0] M_adderInput_b_out;
  wire [4-1:0] M_adderInput_c_out;
  wire [4-1:0] M_adderInput_d_out;
  wire [8-1:0] M_adderInput_testcase;
  reg [1-1:0] M_adderInput_s;
  reg [1-1:0] M_adderInput_co;
  adder_2 adderInput (
    .clk(clk),
    .rst(rst),
    .s(M_adderInput_s),
    .co(M_adderInput_co),
    .a(M_adderInput_a),
    .b(M_adderInput_b),
    .ci(M_adderInput_ci),
    .a_out(M_adderInput_a_out),
    .b_out(M_adderInput_b_out),
    .c_out(M_adderInput_c_out),
    .d_out(M_adderInput_d_out),
    .testcase(M_adderInput_testcase)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_seg_values = 16'h0000;
    M_seg_values = {M_adderInput_a_out, M_adderInput_b_out, M_adderInput_c_out, M_adderInput_d_out};
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    a = 1'h0;
    b = 1'h0;
    ci = 1'h0;
    a = M_adderInput_a;
    b = M_adderInput_b;
    ci = M_adderInput_ci;
    M_adderInput_s = s;
    M_adderInput_co = co;
  end
endmodule
